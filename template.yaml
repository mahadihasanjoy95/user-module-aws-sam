AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  user-module

  Sample SAM Template for user-module

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    MemorySize: 128
    Tracing: Active
    Environment:
      Variables:
        STAGE: !Ref Stage
        UserPool: !Ref UserPool
        UserPoolClient: !Ref UserPoolClient
        DynamoTableName: !Ref TableName
        RegionName: !Ref Region
  Api:
    TracingEnabled: true
Parameters:
  Stage:
    Type: String
  ProjectName:
    Type: String
    Description: 'Name of the project'
    Default: 'user-module'
  TableName:
    Type: String
    Description: 'Name of the dynamo Table as it is single table design model'
    Default: 'pwsp_revenue_system'
  Region:
    Type: String
    Description: 'Name of the aws region'
    Default: 'ap-northeast-1'
  Tag:
    Type: "String"
    Default: aws-aurora-vpc
  KmsKeyId:
    Description: KMS Key ID to use for encrypting secrets
    Type: String
    Default: 76469d22-c205-4275-b7dd-33cad075b0ce
  DbName:
    Type: String
    Default: usermodule
Resources:
  # Lambdas
  RoleCreate:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          DbName: !Ref DbName
          DbCluster: !GetAtt RDSCluster.DBClusterArn
          DbSecret: !Ref 'DBSecret'
      CodeUri: src/lambdas
      Handler: role_create.lambda_handler
      Runtime: python3.9
      Events:
        RoleCreate:
          Type: Api
          Properties:
            Path: /role/create
            RestApiId: !Ref MyCustomApi
            Method: post
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - "cognito-idp:CreateGroup"
                - "rds-data:ExecuteStatement"
                - "secretsmanager:GetSecretValue"
              Resource: '*'
  CreateUser:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          DbName: !Ref DbName
          DbCluster: !GetAtt RDSCluster.DBClusterArn
          DbSecret: !Ref 'DBSecret'
      CodeUri: src/lambdas
      Handler: user_create.lambda_handler
      Runtime: python3.9
      Events:
        CreateUser:
          Type: Api
          Properties:
            Path: /user/create
            RestApiId: !Ref MyCustomApi
            Method: post
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - "cognito-idp:AdminCreateUser"
                - "cognito-idp:AdminSetUserPassword"
                - "cognito-idp:AdminAddUserToGroup"
                - "rds-data:ExecuteStatement"
                - "secretsmanager:GetSecretValue"
              Resource: '*'
  LoginUserFunc:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas/
      Handler: user_login.lambda_handler
      Runtime: python3.9
      Events:
        LoginUser:
          Type: Api
          Properties:
            Path: /user/login
            RestApiId: !Ref MyCustomApi
            Method: post
            Auth:
              Authorizer: NONE
  GetUserFunc:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas/
      Handler: user_get.lambda_handler
      Runtime: python3.9
      Events:
        GetUsers:
          Type: Api
          Properties:
            Path: /user/get
            RestApiId: !Ref MyCustomApi
            Method: get

      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoTable
  ApiCreate:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          DbName: !Ref DbName
          DbCluster: !GetAtt RDSCluster.DBClusterArn
          DbSecret: !Ref 'DBSecret'
      CodeUri: src/lambdas/
      Handler: api_create.lambda_handler
      Runtime: python3.9
      Events:
        ApiCreate:
          Type: Api
          Properties:
            Path: /api/create
            RestApiId: !Ref MyCustomApi
            Method: post
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - "rds-data:ExecuteStatement"
                - "secretsmanager:GetSecretValue"
              Resource: '*'
  ModuleCreate:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          DbName: !Ref DbName
          DbCluster: !GetAtt RDSCluster.DBClusterArn
          DbSecret: !Ref 'DBSecret'
      CodeUri: src/lambdas/
      Handler: module_create.lambda_handler
      Runtime: python3.9
      Events:
        ModuleCreate:
          Type: Api
          Properties:
            Path: /module/create
            RestApiId: !Ref MyCustomApi
            Method: post
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - "rds-data:ExecuteStatement"
                - "secretsmanager:GetSecretValue"
              Resource: '*'
  FeatureCreate:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          DbName: !Ref DbName
          DbCluster: !GetAtt RDSCluster.DBClusterArn
          DbSecret: !Ref 'DBSecret'
      CodeUri: src/lambdas/
      Handler: feature_create.lambda_handler
      Runtime: python3.9
      Events:
        FeatureCreate:
          Type: Api
          Properties:
            Path: /feature/create
            RestApiId: !Ref MyCustomApi
            Method: post
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - "rds-data:ExecuteStatement"
                - "secretsmanager:GetSecretValue"
              Resource: '*'
  RoleAssign:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          DbName: !Ref DbName
          DbCluster: !GetAtt RDSCluster.DBClusterArn
          DbSecret: !Ref 'DBSecret'
      CodeUri: src/lambdas/
      Handler: role_assign.lambda_handler
      Runtime: python3.9
      Events:
        RoleAssign:
          Type: Api
          Properties:
            Path: /role/assign
            RestApiId: !Ref MyCustomApi
            Method: post
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - "rds-data:ExecuteStatement"
                - "secretsmanager:GetSecretValue"
                - "cognito-idp:AdminAddUserToGroup"
              Resource: '*'
  ApiAssign:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          DbName: !Ref DbName
          DbCluster: !GetAtt RDSCluster.DBClusterArn
          DbSecret: !Ref 'DBSecret'
      CodeUri: src/lambdas/
      Handler: api_assign.lambda_handler
      Runtime: python3.9
      Events:
        ApiAssign:
          Type: Api
          Properties:
            Path: /api/assign
            RestApiId: !Ref MyCustomApi
            Method: post
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - "rds-data:ExecuteStatement"
                - "secretsmanager:GetSecretValue"
              Resource: '*'

  #CustomAuthorizer Method
  CustomAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas
      Handler: user_authorization.lambda_handler
      Runtime: python3.9
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoTable
  #Userpool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${Stage}-UserPool
      EmailConfiguration:
        EmailSendingAccount: DEVELOPER
        From: "Water Development< niloy369@gmail.com >"
        SourceArn: "arn:aws:ses:us-west-2:534678543881:identity/niloy369@gmail.com"
  #UserPoolClient
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub ${Stage}-UserPoolClient
      ExplicitAuthFlows:
        - USER_PASSWORD_AUTH

  #Custom API with Custom Authorizer
  MyCustomApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Auth:
        DefaultAuthorizer: MyLambdaTokenAuthorizer
        Authorizers:
          MyLambdaTokenAuthorizer:
            FunctionArn: !GetAtt CustomAuthorizerFunction.Arn
  #Database Configuration (DynamoDB)
  DynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${TableName}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: "PK"
          AttributeType: "S"
        - AttributeName: "SK"
          AttributeType: "S"
        - AttributeName: "GSI1PK"
          AttributeType: "S"
        - AttributeName: "GSI1SK"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "PK"
          KeyType: "HASH"
        - AttributeName: "SK"
          KeyType: "RANGE"
      GlobalSecondaryIndexes:
        - IndexName: Index1
          KeySchema:
            - AttributeName: "GSI1PK"
              KeyType: "HASH"
            - AttributeName: "GSI1SK"
              KeyType: "RANGE"
          Projection:
            ProjectionType: ALL

  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.0.0.0/16"
      Tags:
      - Key: "Name"
        Value: !Ref "Tag"
  SubnetA:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: 'AWS::Region'
      VpcId: !Ref "VPC"
      CidrBlock: "10.0.0.0/24"

  SubnetB:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: 'AWS::Region'
      VpcId: !Ref "VPC"
      CidrBlock: "10.0.1.0/24"

  RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref "VPC"

  SubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupName: "subnetgroup"
      DBSubnetGroupDescription: "Subnet Group"
      SubnetIds:
        - !Ref "SubnetA"
        - !Ref "SubnetB"

  InstanceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: "Example Security Group"
      GroupDescription: "RDS traffic"
      VpcId: !Ref "VPC"
      SecurityGroupEgress:
      - IpProtocol: "-1"
        CidrIp: "0.0.0.0/0"

  InstanceSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: "InstanceSecurityGroup"
    Properties:
      GroupId: !Ref "InstanceSecurityGroup"
      IpProtocol: "tcp"
      FromPort: "0"
      ToPort: "65535"
      SourceSecurityGroupId: !Ref "InstanceSecurityGroup"

  RDSCluster:
    Type: "AWS::RDS::DBCluster"
    Properties:
      EnableHttpEndpoint: true
      DBSubnetGroupName: !Ref "SubnetGroup"
      MasterUsername: !Join [ '', [ '{{resolve:secretsmanager:', !Ref DBSecret, ':SecretString:username}}' ] ]
      MasterUserPassword: !Join [ '', [ '{{resolve:secretsmanager:', !Ref DBSecret, ':SecretString:password}}' ] ]
      DatabaseName: "usermodule"
      Engine: "aurora"
      EngineMode: "serverless"
      VpcSecurityGroupIds:
      - !Ref "InstanceSecurityGroup"
      ScalingConfiguration:
        AutoPause: true
        MaxCapacity: 16
        MinCapacity: 2
        SecondsUntilAutoPause: 300
  DBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Username and password for database
      GenerateSecretString:
        GenerateStringKey: "password"
        PasswordLength: 20
        SecretStringTemplate: '{"username": "mahadi"}'
        ExcludePunctuation: True
      Tags:
        - Key: Name
          Value: db-secret
      Name: DBSecret

  DBSecretAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref DBSecret
      TargetId: !Ref RDSCluster
      TargetType: AWS::RDS::DBCluster