AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  user-module

  Sample SAM Template for user-module

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 500
    MemorySize: 128
    Tracing: Active
    Environment:
      Variables:
        UserPool: !Ref UserPool
        UserPoolClient: !Ref UserPoolClient
        RegionName: !Ref Region
        AURORA_DB_SECRET: arn:aws:secretsmanager:ap-northeast-1:534678543881:secret:waterprojectsecret-dev-34YP7E
        AURORA_CLUSTER_HOST: 35.160.90.166
        DBPORT: 6033

  Api:
    TracingEnabled: true
Parameters:
  StageName:
    Type: String
    Default: dev
  IdentityPoolName:
    Type: String
    Default: 'user-module-identity-pool'
  ProjectName:
    Type: String
    Description: 'Name of the project'
    Default: 'user-module'
  Region:
    Type: String
    Description: 'Name of the aws region'
    Default: 'ap-northeast-1'
  Tag:
    Type: "String"
    Default: aws-aurora-vpc
  AuroraClusterIdentifier:
    Description: Aurora cluster identifier
    Type: String
    Default: water-aurora-cluster
  AuroraInstanceIdentifier:
    Description: Aurora instance identifier
    Type: String
    Default: water-aurora-instance
  AuroraDBName:
    Description: Aurora database name
    Type: String
    Default: waterauroradb
  AuroraDBProxyName:
    Description: Aurora database name
    Type: String
    Default: waterauroradb-proxy
  VPCSubnetIds:
    Type: String
    Default: "subnet-529b2879,subnet-7ce74f34,subnet-f94e54a2"
  DbSubnetGroupName:
    Type: String
    Default: "water-db-subnet-group"

Conditions:
  IsDevEnv: !Equals
    - !Ref StageName
    - development
  IsQAEnv: !Equals
    - !Ref StageName
    - qa
  IsProdEnv: !Equals
    - !Ref StageName
    - prod
  IsOtherEnv: !Equals
    - !Ref StageName
    - other
  # DBResourceCreatingCondition: !Equals
  #   - Condition: IsOtherEnv
  IsDBResourceCreated: !Equals
    - !Ref StageName
    - prod

Resources:
  # Lambdas
  RoleCreate:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref MyLibLayer
      CodeUri: src/lambdas
      Handler: role_create.lambda_handler
      Runtime: python3.9
      Events:
        RoleCreate:
          Type: Api
          Properties:
            Path: /role/create
            RestApiId: !Ref MyCustomApi
            Method: post
            Auth:
              Authorizer: NONE
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - "cognito-idp:CreateGroup"
                - "rds-data:ExecuteStatement"
                - "secretsmanager:GetSecretValue"
              Resource: '*'
  CreateUser:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt CustomLambdaAuroraVPCRole.Arn
      Layers:
        - !Ref MyLibLayer
      CodeUri: src/lambdas
      Handler: user_create.lambda_handler
      Runtime: python3.9
      Events:
        CreateUser:
          Type: Api
          Properties:
            Path: /user/create
            RestApiId: !Ref MyCustomApi
            Method: post
            Auth:
              Authorizer: NONE
  CreateAllTablesFunc:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt CustomLambdaAuroraVPCRole.Arn
      Layers:
        - !Ref MyLibLayer
      CodeUri: src/lambdas
      Handler: custom_lambda_function.lambda_handler
      Runtime: python3.9
      Events:
        CreateUser:
          Type: Api
          Properties:
            Path: /alltable/create
            RestApiId: !Ref MyCustomApi
            Method: post
            Auth:
              Authorizer: NONE
#      Policies:
#        - Version: '2012-10-17'
#          Statement:
#            - Effect: Allow
#              Action:
#                - "cognito-idp:AdminCreateUser"
#                - "cognito-idp:AdminSetUserPassword"
#                - "cognito-idp:AdminAddUserToGroup"
#                - "cognito-idp:AdminGetUser"
#                - "rds-data:ExecuteStatement"
#                - "secretsmanager:GetSecretValue"
#              Resource: '*'
  UpdateUser:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref MyLibLayer
      CodeUri: src/lambdas
      Handler: user_edit.lambda_handler
      Runtime: python3.9
      Events:
        CreateUser:
          Type: Api
          Properties:
            Path: /user/edit
            RestApiId: !Ref MyCustomApi
            Method: post
            Auth:
              Authorizer: NONE
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - "rds-data:ExecuteStatement"
                - "secretsmanager:GetSecretValue"
              Resource: '*'
  ImageUpdate:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref MyLibLayer
      CodeUri: src/lambdas
      Handler: user_image_upload.lambda_handler
      Runtime: python3.9
      Events:
        CreateUser:
          Type: Api
          Properties:
            Path: /user/image/update
            RestApiId: !Ref MyCustomApi
            Method: post
            Auth:
              Authorizer: NONE
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - "rds-data:ExecuteStatement"
                - "secretsmanager:GetSecretValue"
              Resource: '*'
  DeleteUser:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref MyLibLayer
      CodeUri: src/lambdas
      Handler: user_delete.lambda_handler
      Runtime: python3.9
      Events:
        CreateUser:
          Type: Api
          Properties:
            Path: /user/delete/{id}
            RestApiId: !Ref MyCustomApi
            Method: get
            Auth:
              Authorizer: NONE
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - "cognito-idp:AdminDeleteUser"
                - "rds-data:ExecuteStatement"
                - "secretsmanager:GetSecretValue"
              Resource: '*'
  DeleteRole:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref MyLibLayer
      CodeUri: src/lambdas
      Handler: role_delete.lambda_handler
      Runtime: python3.9
      Events:
        CreateUser:
          Type: Api
          Properties:
            Path: /role/delete/{name}
            RestApiId: !Ref MyCustomApi
            Method: get
            Auth:
              Authorizer: NONE
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - "cognito-idp:AdminDeleteUser"
                - "rds-data:ExecuteStatement"
                - "secretsmanager:GetSecretValue"
              Resource: '*'
  PasswordChnage:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref MyLibLayer
      CodeUri: src/lambdas
      Handler: user_change_password.lambda_handler
      Runtime: python3.9
      Events:
        CreateUser:
          Type: Api
          Properties:
            Path: /user/password/change
            RestApiId: !Ref MyCustomApi
            Method: post
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - "cognito-idp:AdminSetUserPassword"
              Resource: '*'
  LoginUserFunc:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref MyLibLayer
      CodeUri: src/lambdas/
      Handler: user_login.lambda_handler
      Runtime: python3.9
      Events:
        LoginUser:
          Type: Api
          Properties:
            Path: /user/login
            RestApiId: !Ref MyCustomApi
            Method: post
            Auth:
              Authorizer: NONE
  GetUserFunc:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt CustomLambdaAuroraVPCRole.Arn
      Layers:
        - !Ref MyLibLayer
      CodeUri: src/lambdas/
      Handler: user_get.lambda_handler
      Runtime: python3.9
      Events:
        GetUsers:
          Type: Api
          Properties:
            Path: /user/get
            RestApiId: !Ref MyCustomApi
            Method: get
  GetRoleFunc:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref MyLibLayer
      CodeUri: src/lambdas/
      Handler: role_list.lambda_handler
      Runtime: python3.9
      Events:
        GetUsers:
          Type: Api
          Properties:
            Path: /role/get
            RestApiId: !Ref MyCustomApi
            Method: get
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - "rds-data:ExecuteStatement"
                - "secretsmanager:GetSecretValue"
              Resource: '*'
  ApiCreate:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref MyLibLayer
      CodeUri: src/lambdas/
      Handler: api_create.lambda_handler
      Runtime: python3.9
      Events:
        ApiCreate:
          Type: Api
          Properties:
            Path: /api/create
            RestApiId: !Ref MyCustomApi
            Method: post
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - "rds-data:ExecuteStatement"
                - "secretsmanager:GetSecretValue"
              Resource: '*'
  ModuleCreate:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref MyLibLayer
      CodeUri: src/lambdas/
      Handler: module_create.lambda_handler
      Runtime: python3.9
      Events:
        ModuleCreate:
          Type: Api
          Properties:
            Path: /module/create
            RestApiId: !Ref MyCustomApi
            Method: post
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - "rds-data:ExecuteStatement"
                - "secretsmanager:GetSecretValue"
              Resource: '*'
  FeatureCreate:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref MyLibLayer
      CodeUri: src/lambdas/
      Handler: feature_create.lambda_handler
      Runtime: python3.9
      Events:
        FeatureCreate:
          Type: Api
          Properties:
            Path: /feature/create
            RestApiId: !Ref MyCustomApi
            Method: post
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - "rds-data:ExecuteStatement"
                - "secretsmanager:GetSecretValue"
              Resource: '*'
  RoleAssign:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt CustomLambdaAuroraVPCRole.Arn
      Layers:
        - !Ref MyLibLayer
      CodeUri: src/lambdas/
      Handler: role_assign.lambda_handler
      Runtime: python3.9
      Events:
        RoleAssign:
          Type: Api
          Properties:
            Path: /role/assign
            RestApiId: !Ref MyCustomApi
            Method: post
            Auth:
              Authorizer: NONE
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - "rds-data:ExecuteStatement"
                - "secretsmanager:GetSecretValue"
                - "cognito-idp:AdminAddUserToGroup"
              Resource: '*'
  ApiAssign:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref MyLibLayer
      CodeUri: src/lambdas/
      Handler: api_assign.lambda_handler
      Runtime: python3.9
      Events:
        ApiAssign:
          Type: Api
          Properties:
            Path: /api/assign
            RestApiId: !Ref MyCustomApi
            Method: post
            Auth:
              Authorizer: NONE
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - "rds-data:ExecuteStatement"
                - "secretsmanager:GetSecretValue"
              Resource: '*'

  #CustomAuthorizer Method
  CustomAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref MyLibLayer
      CodeUri: src/lambdas
      Handler: user_authorization.lambda_handler
      Runtime: python3.9
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - "rds-data:ExecuteStatement"
                - "secretsmanager:GetSecretValue"
              Resource: '*'
  #Userpool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${StageName}-UserPool
      EmailConfiguration:
        EmailSendingAccount: DEVELOPER
        From: "Water Development< niloy369@gmail.com >"
        SourceArn: "arn:aws:ses:us-west-2:534678543881:identity/niloy369@gmail.com"
  #UserPoolClient
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub ${StageName}-UserPoolClient
      ExplicitAuthFlows:
        - USER_PASSWORD_AUTH
  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Ref IdentityPoolName
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName
  IdentityPoolRoleMapping:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      RoleMappings:
        CognitoProvider:
          IdentityProvider: !Sub "cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}:${UserPoolClient}"
          # IdentityProvider: !Join ["", ["cognito-idp.", !Ref "AWS::Region", ".amazonaws.com" , "/", !Ref UserPool, ":", !Ref UserPoolClient],]
          AmbiguousRoleResolution: AuthenticatedRole  # AuthenticatedRole, Deny
          Type: Token # Token, Rules
      Roles:
        authenticated: !GetAtt CognitoAuthenticatedRole.Arn
        unauthenticated: !GetAtt CognitoUnAuthenticatedRole.Arn

  CognitoAuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: !Sub "${IdentityPoolName}_authenticated_policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                  - "cognito-identity:*"
                  - "s3:*"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                  - "chime:*"
                  - "cognito-idp:*"
                Resource: "*"
  CognitoUnAuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": unauthenticated
      Policies:
        - PolicyName: !Sub "${IdentityPoolName}_unauthenticated_policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                  - "s3:*"
                Resource: "*"

  #Custom API with Custom Authorizer
  MyCustomApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref StageName
      Auth:
        DefaultAuthorizer: MyLambdaTokenAuthorizer
        Authorizers:
          MyLambdaTokenAuthorizer:
            FunctionArn: !GetAtt CustomAuthorizerFunction.Arn
  MyLibLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: src/my_lib_layer
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: python3.9

#  MyCustomResource:
#    Type: Custom::MyCustomResource
#    Properties:
#      ServiceToken: !GetAtt MyCustomResourceFunction.Arn
#      MethodArn: !Ref MyCustomResourceFunction
#      ForceUpdate:
#        Fn::Sub: "${AWS::StackId}-${AWS::Region}-${AWS::AccountId}-$(date +%s)"
#  MyCustomResourceFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      Role: !GetAtt CustomLambdaAuroraVPCRole.Arn
#      Layers:
#        - !Ref MyLibLayer
#      CodeUri: src/lambdas/
#      Handler: custom_lambda_function.lambda_handler
#      Runtime: python3.9
#      Timeout: 180
#      Policies:
#        - Version: '2012-10-17'
#          Statement:
#            - Effect: Allow
#              Action:
#                - "rds-data:ExecuteStatement"
#                - "secretsmanager:GetSecretValue"
#              Resource: '*'
  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: my-bucket-water
      AccessControl: PublicRead
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
            ExposedHeaders:
              - ETag
              - x-amz-meta-custom-header
            AllowedOrigins:
              - "*"
  # =========================== Aurora DB ===========================
  AuroraDBProxy:
   Type: AWS::RDS::DBProxy
   Condition: IsDBResourceCreated
   DependsOn: RDSDBInstance1
   Properties:
     Auth:
       - {AuthScheme: SECRETS, SecretArn: !Ref AuroraSecret, IAMAuth: DISABLED}
     DBProxyName: !Sub "${AuroraDBProxyName}-${StageName}"
     EngineFamily: MYSQL
     RequireTLS: false
     RoleArn: !GetAtt CustomLambdaAuroraVPCRole.Arn
     VpcSubnetIds:
       !Split [ ",", !Ref VPCSubnetIds ]
  RDSDBInstance1:
    Type: AWS::RDS::DBInstance
    Condition: IsDBResourceCreated
    Properties:
      DBClusterIdentifier: !Ref RDSCluster
      DBInstanceClass: db.t3.small
      DBInstanceIdentifier: !Sub "${AuroraInstanceIdentifier}-${StageName}"
      Engine: aurora-mysql
      PubliclyAccessible: true
      DBParameterGroupName: !Ref   AuroraParameterGroup
      DBSubnetGroupName: !Ref RDSDBSubnetGroup
  AuroraParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Condition: IsDBResourceCreated
    Properties:
      Description: "custom parameter group for database"
      Family: "aurora-mysql5.7"
      Parameters:
        max_connections: 200
  RDSDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Condition: IsDBResourceCreated
    Properties:
      DBSubnetGroupName: !Sub "${DbSubnetGroupName}-${StageName}"
      DBSubnetGroupDescription: "Db Subnet group"
      SubnetIds:
        !Split [ ",", !Ref VPCSubnetIds ]
  RDSCluster:
    Type: AWS::RDS::DBCluster
    Condition: IsDBResourceCreated
    Properties:
      DatabaseName: !Sub "${AuroraDBName}${StageName}"
      DBClusterIdentifier: !Sub "${AuroraClusterIdentifier}-${StageName}"
      DBClusterParameterGroupName: "default.aurora-mysql5.7"
      Engine: aurora-mysql
      EngineVersion: "5.7.mysql_aurora.2.07.2"
      EngineMode: provisioned
      MasterUsername: !Join [ '', [ '{{resolve:secretsmanager:', !Ref   AuroraSecret, ':SecretString:username}}' ] ]
      MasterUserPassword: !Join [ '', [ '{{resolve:secretsmanager:', !Ref   AuroraSecret, ':SecretString:password}}' ] ]
      DBSubnetGroupName: !Ref RDSDBSubnetGroup
  AuroraSecret:
    Type: AWS::SecretsManager::Secret
    Condition: IsDBResourceCreated
    Properties:
      Name: !Sub "water-aurora-secret-${StageName}"
      Description: "This secret has a dynamically generated secret password."
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "admin", "dbname": "${AuroraDBName}${StageName}"}' # working
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\'

  AuroraDBProxyTargetGroup:
   Type: AWS::RDS::DBProxyTargetGroup
   Condition: IsDBResourceCreated
   Properties:
     DBProxyName: !Ref AuroraDBProxy
     DBClusterIdentifiers: [!Ref RDSCluster]
     TargetGroupName: default
     ConnectionPoolConfigurationInfo:
         MaxConnectionsPercent: 100
         MaxIdleConnectionsPercent: 50
         ConnectionBorrowTimeout: 120

  CustomLambdaAuroraVPCRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "acm:*"
                  - "application-autoscaling:*"
                  - "batch:*"
                  - "cloudwatch:*"
                  - "cloudformation:*"
                  - "cognito-identity:*"
                  - "cognito-idp:*"
                  - "cognito-sync:*"
                  - "cloudfront-vod:*"
                  - "dynamodb:*"
                  - "dax:*"
                  - "datapipeline:*"
                  - "ec2:*"
                  - "iam:*"
                  - "kms:*"
                  - "kinesis:*"
                  - "lambda:*"
                  - "logs:*"
                  - "mediaconvert:*"
                  - "mediapackage-vod:*"
                  - "mobiletargeting:*"
                  - "outposts:*"
                  - "pi:*"
                  - "rds:*"
                  - "redshift:*"
                  - "resource-groups:*"
                  - "s3:*"
                  - "secretsmanager:*"
                  - "sns:*"
                  - "sqs:*"
                  - "ses:*"
                  - "states:*"
                  - "tag:*"
                  - "chime:*"
                  - "execute-api:*"
                  - "events:*"
                  - "appconfig:*"
                  - "xray:*"
                Resource: '*'
              - Effect: Allow
                Action:
                  - "rds-db:connect"
                Resource: !Sub "arn:aws:rds:us-west-2:${AWS::AccountId}:db-proxy:*/*"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
                - 'mediaconvert.amazonaws.com'
                - 'cloudfront.amazonaws.com'
                - !Sub "states.${AWS::Region}.amazonaws.com"
                - 'mediapackage.amazonaws.com'
                - 'rds.amazonaws.com'
                - 'secretsmanager.amazonaws.com'
                - 'dax.amazonaws.com'
                - 'events.amazonaws.com'
            Action:
              - 'sts:AssumeRole'

